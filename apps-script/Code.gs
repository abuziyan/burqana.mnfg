
/** Google Apps Script backend for Clothing Manufacturing App (Web + GH Pages)
 * Same implementation as before â€” endpoints: login, logTime, logOperation,
 * getLogs, getSewerOperations, approveOperation, getPayrollSummary
 */
const SPREADSHEET_ID = PropertiesService.getScriptProperties().getProperty("SHEET_ID");
const API_KEY = PropertiesService.getScriptProperties().getProperty("API_KEY");
function doOptions(e) { return ContentService.createTextOutput("").setMimeType(ContentService.MimeType.JSON).setHeaders(getCorsHeaders()); }
function doGet(e) { try { if (!authorize(e)) return forbidden(); const a=(e.parameter.action||"").toLowerCase(); switch(a){case "getlogs": return jsonOk(getLogs_(e)); case "getpayrollsummary": return jsonOk(getPayrollSummary_(e)); case "getseweroperations": return jsonOk(getSewerOperations_(e)); default: return jsonError("Unknown action (GET): "+a);} } catch(err){ return jsonError(err.toString()); } }
function doPost(e) { try { if (!authorize(e)) return forbidden(); const a=(e.parameter.action||"").toLowerCase(); const b=e.postData&&e.postData.contents?JSON.parse(e.postData.contents):{}; switch(a){case "login": return jsonOk(login_(b)); case "logtime": return jsonOk(logTime_(b)); case "logoperation": return jsonOk(logOperation_(b)); case "approveoperation": return jsonOk(approveOperation_(b)); default: return jsonError("Unknown action (POST): "+a);} } catch(err){ return jsonError(err.toString()); } }
function getCorsHeaders(){ return {"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET,POST,OPTIONS","Access-Control-Allow-Headers":"Content-Type,X-API-Key"}; }
function jsonOk(d){ const out=ContentService.createTextOutput(JSON.stringify({success:true,data:d})).setMimeType(ContentService.MimeType.JSON); const h=getCorsHeaders(); for(const k in h) out.setHeader(k,h[k]); return out; }
function jsonError(m){ const out=ContentService.createTextOutput(JSON.stringify({success:false,message:m})).setMimeType(ContentService.MimeType.JSON); const h=getCorsHeaders(); for(const k in h) out.setHeader(k,h[k]); return out; }
function forbidden(){ const out=ContentService.createTextOutput(JSON.stringify({success:false,message:"Forbidden"})).setMimeType(ContentService.MimeType.JSON); const h=getCorsHeaders(); for(const k in h) out.setHeader(k,h[k]); return out; }
function authorize(e){ const k=(e.parameter&&e.parameter.key)||null; if(k&&k===API_KEY) return true; try{ if(e.postData&&e.postData.contents){ const o=JSON.parse(e.postData.contents); if(o&&o.apiKey&&o.apiKey===API_KEY) return true; } }catch(err){} return API_KEY===null||API_KEY===""; }
function getSheet(name){ return SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(name); }
function login_(b){ const email=(b.email||"").toLowerCase().trim(), pw=(b.password||"").trim(), sh=getSheet("Users"); const rows=sh.getDataRange().getValues(); const head=rows.shift(); const idx={id:head.indexOf("ID"),name:head.indexOf("Name"),role:head.indexOf("Role"),email:head.indexOf("Email"),password:head.indexOf("Password")}; for(let i=0;i<rows.length;i++){ const r=rows[i]; if((r[idx.email]||"").toString().toLowerCase()===email){ if((r[idx.password]||"").toString()===pw){ return {id:r[idx.id],name:r[idx.name],role:r[idx.role],email:r[idx.email]}; } else { throw new Error("Invalid credentials"); } } } throw new Error("User not found"); }
function logTime_(b){ const id=b.employeeId, act=(b.action||"").toLowerCase(), sh=getSheet("TimeLogs"), tz="Asia/Manila", now=new Date(), dateStr=Utilities.formatDate(now,tz,"yyyy-MM-dd"), timeStr=Utilities.formatDate(now,tz,"HH:mm:ss"); if(act==="clock_in"){ sh.appendRow([dateStr,id,timeStr,"",""]); return {date:dateStr,employeeId:id,timeIn:timeStr,timeOut:"",totalHours:0}; } else if(act==="clock_out"){ const vals=sh.getDataRange().getValues(); const head=vals.shift(); const iEmp=head.indexOf("Employee ID"), iDate=head.indexOf("Date"), iIn=head.indexOf("Time In"), iOut=head.indexOf("Time Out"), iTot=head.indexOf("Total Hours"); for(let i=vals.length-1;i>=0;i--){ const r=vals[i]; if(r[iEmp]==id && !r[iOut]){ const row=i+2; sh.getRange(row,iOut+1).setValue(timeStr); const start=new Date(r[iDate]+" "+r[iIn]), end=new Date(r[iDate]+" "+timeStr); const hrs=Math.max(0,(end-start)/(1000*60*60)); sh.getRange(row,iTot+1).setValue(hrs); return {date:dateStr,employeeId:id,timeIn:r[iIn],timeOut:timeStr,totalHours:hrs}; } } throw new Error("No open time-in found"); } else throw new Error("Invalid action"); }
function logOperation_(b){ const sh=getSheet("SewerOperations"), ref=getSheet("ReferenceOperations"), tz="Asia/Manila", now=new Date(), dateStr=Utilities.formatDate(now,tz,"yyyy-MM-dd"), opId="OP-"+now.getTime(); let unitPrice=b.unitPrice; if(!unitPrice){ const refVal=ref.getDataRange().getValues(); const head=refVal.shift(); const iName=head.indexOf("Operation Name"), iPrice=head.indexOf("Unit Price"); for(let i=0;i<refVal.length;i++){ if((refVal[i][iName]||"").toString().toLowerCase()===(b.operationName||"").toLowerCase()){ unitPrice=Number(refVal[i][iPrice]); break; } } } if(!unitPrice) unitPrice=0; sh.appendRow([opId,dateStr,b.sewerId,b.operationName,b.quantity,unitPrice,"Pending"]); return {operationId:opId,date:dateStr,sewerId:b.sewerId,operationName:b.operationName,quantity:b.quantity,unitPrice:unitPrice,status:"Pending"}; }
function approveOperation_(b){ const sh=getSheet("SewerOperations"), vals=sh.getDataRange().getValues(), head=vals.shift(), iId=head.indexOf("Operation ID"), iStatus=head.indexOf("Status"); for(let i=0;i<vals.length;i++){ if(vals[i][iId]==b.operationId){ sh.getRange(i+2,iStatus+1).setValue(b.status); return "OK"; } } throw new Error("Operation not found"); }
function getLogs_(e){ const type=(e.parameter.type||"").toLowerCase(), userId=e.parameter.userId; if(!userId) throw new Error("userId is required"); if(type==="time"){ const sh=getSheet("TimeLogs"), vals=sh.getDataRange().getValues(), head=vals.shift(), iEmp=head.indexOf("Employee ID"); const out=[]; for(let i=0;i<vals.length;i++){ const r=vals[i]; if(r[iEmp]==userId) out.push(objectify(head,r)); } return out; } else if(type==="sewer"){ const sh=getSheet("SewerOperations"), vals=sh.getDataRange().getValues(), head=vals.shift(), iS=head.indexOf("Sewer ID"); const out=[]; for(let i=0;i<vals.length;i++){ const r=vals[i]; if(r[iS]==userId) out.push(objectify(head,r)); } return out; } else { throw new Error("Invalid type; must be 'time' or 'sewer'"); } }
function getSewerOperations_(e){ const sh=getSheet("SewerOperations"), vals=sh.getDataRange().getValues(), head=vals.shift(); const iId=head.indexOf("Operation ID"), iDate=head.indexOf("Date"), iS=head.indexOf("Sewer ID"), iN=head.indexOf("Operation Name"), iQ=head.indexOf("Quantity"), iP=head.indexOf("Unit Price"), iSt=head.indexOf("Status"); const wantStatus=(e.parameter.status||"").trim(), wantS=(e.parameter.sewerId||"").trim(); const out=[]; for(let i=0;i<vals.length;i++){ const r=vals[i]; if(wantStatus && (r[iSt]||"")!=wantStatus) continue; if(wantS && (r[iS]||"")!=wantS) continue; out.push({operationId:r[iId],date:r[iDate],sewerId:r[iS],operationName:r[iN],quantity:Number(r[iQ]||0),unitPrice:Number(r[iP]||0),status:r[iSt]||""}); } return out; }
function getPayrollSummary_(e){ const userId=e.parameter.userId, users=getSheet("Users"), timeLogs=getSheet("TimeLogs"), ops=getSheet("SewerOperations"); const uvals=users.getDataRange().getValues(), uhead=uvals.shift(); const uid=uhead.indexOf("ID"), uname=uhead.indexOf("Name"), urole=uhead.indexOf("Role"), urate=uhead.indexOf("HourlyRate"); const map={}; uvals.forEach(r => map[r[uid]]={name:r[uname], role:r[urole], rate:Number(r[urate]||0)}); function compute(id){ const u=map[id]; if(!u) return null; if((u.role||"").toLowerCase().includes("regular")){ const tvals=timeLogs.getDataRange().getValues(), thead=tvals.shift(); const iEmp=thead.indexOf("Employee ID"), iH=thead.indexOf("Total Hours"); let hrs=0; for(let i=0;i<tvals.length;i++) if(tvals[i][iEmp]==id) hrs+=Number(tvals[i][iH]||0); return {id, role:u.role, name:u.name, totalPay: hrs*(u.rate||0), payPeriod:"All-time"}; } else if((u.role||"").toLowerCase().includes("sewer")){ const ovals=ops.getDataRange().getValues(), ohead=ovals.shift(); const iS=ohead.indexOf("Sewer ID"), iQ=ohead.indexOf("Quantity"), iP=ohead.indexOf("Unit Price"), iSt=ohead.indexOf("Status"); let sum=0; for(let i=0;i<ovals.length;i++){ const r=ovals[i]; if(r[iS]==id && (r[iSt]||"")==="Approved") sum+=Number(r[iQ])*Number(r[iP]); } return {id, role:u.role, name:u.name, totalPay: sum, payPeriod:"All-time"}; } else { return {id, role:u.role, name:u.name, totalPay:0, payPeriod:"N/A"}; } } if(userId){ const row=compute(userId); if(!row) throw new Error("User not found"); return [row]; } else { const out=[]; for(const id in map){ const row=compute(id); if(row) out.push(row); } return out; } }
function objectify(h, r){ const o={}; for(let i=0;i<h.length;i++) o[h[i]]=r[i]; return o; }
